https://medium.datadriveninvestor.com/unlocking-business-insights-with-sql-a-deep-dive-into-the-classic-models-database-5597bd9dbe4b
https://github.com/darklord-57/darklord/blob/main/sql_projects/classic_models_project/data_analysis.sql
https://www.kaggle.com/code/martatavares/classicmodels-database
https://medium.com/@moyosoreoluboyede/data-analysis-and-exploration-using-sql-mysql-workbench-and-power-bi-932c7e5247a3




SELECT products.productCode, products.productName,orderdetails.priceEach, orderdetails.quantityOrdered,
products.productLine, orderdetails.orderNumber, orders.orderdate,orders.customerNumber,
customers.customerName,customers.city,customers.country, products.buyPrice,products.MSRP
FROM classicmodels.products
JOIN classicmodels.orderdetails
ON classicmodels.products. productCode = classicmodels.orderdetails. productCode
JOIN classicmodels.orders ON classicmodels.orderdetails.orderNumber=classicmodels.orders.orderNumber
JOIN classicmodels.customers ON classicmodels.orders.customerNumber= classicmodels.customers.customerNumber;



SELECT productLine, SUM(quantityOrdered * priceEach) AS totalRevenue
FROM my_table
GROUP BY productLine 
Order by totalRevenue desc;


SELECT SUM(totalRevenue) AS sumTotalRevenue
FROM (
  SELECT productLine, SUM(quantityOrdered * priceEach) AS totalRevenue
  FROM my_table
  GROUP BY productLine
) subquery;


select employeeNumber, count(*) as total_orders_managed, sum(quantityOrdered) as total_products_ordered_under
from orders o
join customers c on o.customerNumber = c.customerNumber
join employees e on c.salesRepEmployeeNumber = e.employeeNumber
join orderdetails o2 on o.orderNumber = o2.orderNumber
group by employeeNumber
order by total_orders_managed desc
limit 3;
